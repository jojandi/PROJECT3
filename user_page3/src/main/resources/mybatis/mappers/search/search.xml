<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project3.gamja.user.dao.SearchDAO">

	<!-- 검색 select -->
    <select id="selectSearch" parameterType="String"  resultType="searchDTO">
    	WITH RandomBooks AS (
		SELECT book_name, book_pub, book_author, book_isbn, book_code,
		ROW_NUMBER() OVER (PARTITION BY book_name ORDER BY DBMS_RANDOM.RANDOM) AS rn, 
		book_img, li_book_info, book_loan FROM book
		JOIN li_book USING (book_isbn)
		WHERE lower(book_name) LIKE lower('%'||#{_parameter}||'%') AND book_loan = 'N' and book_res = 'N')
		SELECT book_name, book_pub, book_author, book_isbn,
		(SELECT book_code FROM RandomBooks rb WHERE rb.book_name = b.book_name AND rn = 1) AS book_code,
		COUNT(*) AS count, book_img, li_book_info
		FROM RandomBooks b
		GROUP BY book_name, book_pub, book_img, li_book_info, book_author, book_isbn
		HAVING lower(book_name) LIKE lower('%'||#{_parameter}||'%')
    </select>
    
    <!-- 도서관별 재고 -->
	<select id="selectLibCount" resultType="bestDTO" parameterType="bestDTO">
		SELECT 
		    b.book_name, b.book_author, b.book_pub, b.book_isbn, 
		    MAX(CASE WHEN lb.book_loan = 'N' AND lb.book_res = 'N' THEN lb.book_code END) AS book_code, 
		    b.book_img, lb.li_book_info, MAX(lb.book_loan_seq) AS book_loan_seq, l.lib_id, l.lib_name, l.lib_call, l.lib_add,
		    COALESCE(SUM(CASE WHEN lb.book_loan = 'N' AND lb.book_res = 'N' THEN 1 ELSE 0 END), 0) AS count
		FROM 
		    library l
		LEFT OUTER JOIN 
		    li_book lb ON l.lib_id = lb.lib_id AND lb.book_isbn = #{book_ISBN} 
		LEFT OUTER JOIN 
		    book b ON lb.book_isbn = b.book_isbn
		WHERE 
		    l.lib_id IS NOT NULL
		GROUP BY 
		    b.book_name, b.book_author, b.book_pub, b.book_isbn, b.book_img, l.lib_id, l.lib_name,lb.li_book_info, l.lib_call, l.lib_add
		ORDER BY 
		    l.lib_id
	</select>
	
	<!-- 장바구니 담기 -->
	<insert id="insertCart" parameterType="cartDTO">
		INSERT INTO 
			user_cart(cart_seq, book_code, user_seq)
		VALUES 
			(user_cart_seq.nextval, #{book_code}, #{user_seq})
	</insert>
	
	<!-- 예약하기 -->
	<insert id="insertRes" parameterType="loanDTO">
		INSERT INTO 
			user_res(res_id, book_code, user_seq, res_day, res_ing, lib_id)
		VALUES 
			(user_res_seq.nextval, #{book_code}, #{user_seq}, sysdate, 'Y', #{lib_id})
	</insert>
	
	<!-- 예약 후 재고에 예약중 표시 -->
	<update id="updateRes" parameterType="loanDTO">
		UPDATE 
			li_book 
		SET 
			book_res = 'Y',
			book_res_seq = book_res_seq + 1
		WHERE
			book_code = #{book_code}
	</update>

</mapper>
